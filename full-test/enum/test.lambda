enum List<T> {
    Nil;
    Cons(T, List<T>);
}

enum Option<T> {
    Some(T);
    None;
}

enum Result<V, E> {
    Ok(V);
    Err(E);
}

extern print_int(Int) : Unit;
extern print_bool(Bool) : Unit;

func print_if_some(print, option) {
    match option {
        None -> {}
        Some(v) -> print(v);
    }
}

func print_result(print_ok, print_err, result) {
    match result {
        Ok(b) -> print_ok(b);
        Err(e) -> print_err(e);
    }
}

func transmute_option(option) {
    match option {
        Some(Ok(v)) -> return Ok(Some(v));
        Some(Err(e)) -> return Err(e);
        None -> return Ok(None);
    }
}

func transmute_result(result) {
    match result {
        Ok(Some(v)) -> return Some(Ok(v));
        Ok(None) -> return None;
        Err(e) -> return Some(Err(e));
    }
}

func print_list(print, list) {
    rest <- list;

    while true {
        match rest {
            Nil -> break;
            Cons(t, r) -> {
                print(t);
                rest <- r;
            }
        }
    }
}

func option_equal(equal, a, b) {
    match a {
        None -> {
            match b {
                None -> return true;
                Some(v) -> return false;
            }
        }
        Some(v) -> {
            match b {
                None -> return false;
                Some(w) -> return equal(v, w);
            }
        }
    }
}

func result_equal(ok_equal, err_equal, a, b) {
    match a {
        Ok(v) -> {
            match b {
                Ok(w) -> return ok_equal(v, w);
                Err(_) -> return false;
            }
        }
        Err(e) -> {
            match b {
                Ok(_) -> return false;
                Err(f) -> return err_equal(e, f);
            }
        }
    }
}

func equals(a, b) {
    return a == b;
}

func main() {
    list <- Cons(1, Cons(2, Cons(3, Nil)));
    print_list(print_int, list);

    print_result_option <- |v| -> print_result(print_bool, print_int, v);
    option <- Some(Ok(true));
    err_option <- Some(Err(3));

    print_if_some(print_result_option, option);
    print_if_some(print_result_option, err_option);
    print_if_some(print_result_option, None);

    print_result(|v| -> print_if_some(print_bool, v), print_int, transmute_option(option));
    print_result(|v| -> print_if_some(print_bool, v), print_int, transmute_option(err_option));

    transmuted <- transmute_result(transmute_option(option));
    equaled <- option_equal(|a, b| -> result_equal(equals, equals, a, b), option, transmuted);
    print_bool(equaled);
}